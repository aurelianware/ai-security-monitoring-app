name: Deploy to Azure Container App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: websecurityapp
  AZURE_CONTAINER_REGISTRY: websecurityappacr
  IMAGE_NAME: websecurityapp
  RESOURCE_GROUP: rg-websecurityapp-prod

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test || true

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Container Registry (if not exists)
      run: |
        # Check if ACR exists, create if it doesn't
        if ! az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
          echo "Creating Azure Container Registry..."
          az acr create --name ${{ env.AZURE_CONTAINER_REGISTRY }} --resource-group ${{ env.RESOURCE_GROUP }} --sku Basic --admin-enabled true
        else
          echo "Azure Container Registry already exists"
        fi

    - name: Get ACR credentials and build/push image
      run: |
        # Get ACR login server and credentials
        ACR_LOGIN_SERVER=$(az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --resource-group ${{ env.RESOURCE_GROUP }} --query loginServer --output tsv)
        echo "ACR Login Server: $ACR_LOGIN_SERVER"
        
        # Get ACR admin credentials
        ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value --output tsv)
        
        # Login to Docker registry
        echo $ACR_PASSWORD | docker login $ACR_LOGIN_SERVER --username $ACR_USERNAME --password-stdin
        
        # Build and tag the Docker image with Auth0 build args
        docker build \
          --build-arg VITE_AUTH0_DOMAIN=dev-iq215msht4aqtejt.us.auth0.com \
          --build-arg VITE_AUTH0_CLIENT_ID=OA7bA8Rzh1N2FKXV1zPp1bCHl6MqN8Y6 \
          -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build \
          --build-arg VITE_AUTH0_DOMAIN=dev-iq215msht4aqtejt.us.auth0.com \
          --build-arg VITE_AUTH0_CLIENT_ID=OA7bA8Rzh1N2FKXV1zPp1bCHl6MqN8Y6 \
          -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest .
        
        # Push the images
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest
        
        # Store image name for next step
        echo "FULL_IMAGE_NAME=$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Configure Web App for Container
      run: |
        # Get ACR credentials for the web app
        ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value --output tsv)
        
        # Configure the web app to use our container
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.FULL_IMAGE_NAME }} \
          --docker-registry-server-url https://${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --docker-registry-server-user $ACR_USERNAME \
          --docker-registry-server-password $ACR_PASSWORD

    - name: Configure App Settings
      run: |
        az webapp config appsettings set --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} \
          --settings \
            NODE_ENV="production" \
            APP_URL="https://privaseeai.net" \
            GH_CLIENT_ID="${{ secrets.GH_CLIENT_ID }}" \
            GH_CLIENT_SECRET="${{ secrets.GH_CLIENT_SECRET }}" \
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE="false" \
            WEBSITES_PORT="8080"

    - name: Restart Web App
      run: |
        az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}

    - name: Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 90
        
        # Try health check multiple times
        for i in {1..5}; do
          echo "Health check attempt $i..."
          if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Health check failed, waiting 30 seconds..."
          sleep 30
        done
        
        echo "Health check failed after multiple attempts, but deployment may still be successful"
        curl -I https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/ || true