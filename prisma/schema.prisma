// Prisma Schema for Production Multi-Tenant Security Application
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant organization model
model Tenant {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  
  // Subscription
  subscriptionTier     String   @default("FREE") // FREE, PRO, ENTERPRISE
  subscriptionStatus   String   @default("active")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  users         User[]
  events        Event[]
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  
  // Multi-tenant isolation
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role          String    @default("member") // owner, admin, member
  
  // Subscription management
  subscriptionTier     String    @default("FREE") // FREE, PRO, ENTERPRISE
  subscriptionStatus   String    @default("active") // active, canceled, past_due
  subscriptionCurrentPeriodEnd DateTime?
  
  // Stripe integration
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Device and storage limits based on subscription
  deviceLimit   Int       @default(2)
  storageLimit  Int       @default(100) // MB
  
  accounts      Account[]
  sessions      Session[]
  devices       Device[]
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Security app models
model Device {
  id           String   @id @default(cuid())
  name         String
  type         String   // raspberry-pi, mobile-ios, etc.
  platform     String
  status       String   @default("offline")
  location     String
  ipAddress    String?
  macAddress   String?
  
  // Tenant isolation
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastSeen     DateTime @default(now())
  
  events       Event[]
}

// Security events with multi-tenant support
model Event {
  id           String   @id @default(cuid())
  kind         String   // detection, motion, alert, recording
  eventType    String?  // person, vehicle, animal, package
  confidence   Float?
  timestamp    DateTime @default(now())
  
  // Object detection data (JSON)
  detections   String?  // JSON array of detections
  metadata     String?  // Additional JSON metadata
  
  // Media files - URLs to Azure Blob Storage
  mediaUrl     String?
  thumbnailUrl String?
  videoUrl     String?
  
  // Device relationship
  deviceId     String?
  device       Device?  @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  
  // Multi-tenant isolation
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Storage and sync
  synced       Boolean  @default(false)
  syncAttempts Int      @default(0)
  lastSyncAt   DateTime?
  
  // Priority for sync queue
  priority     String   @default("medium") // high, medium, low
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@index([synced, priority])
}