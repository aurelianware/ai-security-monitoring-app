{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2025-10-16T22:13:29.440Z",
        "id": "page_2",
        "title": "https://privaseeai.net/auth/github",
        "pageTimings": {
          "onContentLoad": 761.2550000048941,
          "onLoad": 761.4259999973001
        }
      }
    ],
    "entries": [
      {
        "_connectionId": "330314",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "signIn",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 3030
              },
              {
                "functionName": "onClick",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 6012
              },
              {
                "functionName": "sA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9836
              },
              {
                "functionName": "oA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9993
              },
              {
                "functionName": "iA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 10050
              },
              {
                "functionName": "yS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31418
              },
              {
                "functionName": "xS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31838
              },
              {
                "functionName": "",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 37044
              },
              {
                "functionName": "qx",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 39,
                "columnNumber": 37418
              },
              {
                "functionName": "kv",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 8972
              },
              {
                "functionName": "qy",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 33131
              },
              {
                "functionName": "Ey",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17365
              },
              {
                "functionName": "SA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17149
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "443",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/auth/github",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "privaseeai.net"
            },
            {
              "name": "Referer",
              "value": "https://privaseeai.net/?error=auth_failed"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 907,
          "bodySize": 0
        },
        "response": {
          "status": 302,
          "statusText": "Found",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "192"
            },
            {
              "name": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 22:13:29 GMT"
            },
            {
              "name": "Location",
              "value": "https://github.com/login/oauth/authorize?client_id=Ov23liphTXcKC33CrLIE&redirect_uri=https://privaseeai.net/auth/github/callback&scope=read:user,user:email"
            },
            {
              "name": "Vary",
              "value": "Accept"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/html",
            "compression": 0
          },
          "redirectURL": "https://github.com/login/oauth/authorize?client_id=Ov23liphTXcKC33CrLIE&redirect_uri=https://privaseeai.net/auth/github/callback&scope=read:user,user:email",
          "headersSize": 373,
          "bodySize": 0,
          "_transferSize": 373,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "20.119.128.21",
        "startedDateTime": "2025-10-16T22:13:29.438Z",
        "time": 133.0900000029942,
        "timings": {
          "blocked": 2.674999998391606,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.18699999999999994,
          "wait": 129.6530000063954,
          "receive": 0.574999998207204,
          "_blocked_queueing": 2.122999998391606,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "330339",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "signIn",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 3030
              },
              {
                "functionName": "onClick",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 6012
              },
              {
                "functionName": "sA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9836
              },
              {
                "functionName": "oA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9993
              },
              {
                "functionName": "iA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 10050
              },
              {
                "functionName": "yS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31418
              },
              {
                "functionName": "xS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31838
              },
              {
                "functionName": "",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 37044
              },
              {
                "functionName": "qx",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 39,
                "columnNumber": 37418
              },
              {
                "functionName": "kv",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 8972
              },
              {
                "functionName": "qy",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 33131
              },
              {
                "functionName": "Ey",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17365
              },
              {
                "functionName": "SA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17149
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "443",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://github.com/login/oauth/authorize?client_id=Ov23liphTXcKC33CrLIE&redirect_uri=https://privaseeai.net/auth/github/callback&scope=read:user,user:email",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":authority",
              "value": "github.com"
            },
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":path",
              "value": "/login/oauth/authorize?client_id=Ov23liphTXcKC33CrLIE&redirect_uri=https://privaseeai.net/auth/github/callback&scope=read:user,user:email"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "priority",
              "value": "u=0, i"
            },
            {
              "name": "referer",
              "value": "https://privaseeai.net/"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "sec-fetch-dest",
              "value": "document"
            },
            {
              "name": "sec-fetch-mode",
              "value": "navigate"
            },
            {
              "name": "sec-fetch-site",
              "value": "cross-site"
            },
            {
              "name": "sec-fetch-user",
              "value": "?1"
            },
            {
              "name": "upgrade-insecure-requests",
              "value": "1"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [
            {
              "name": "client_id",
              "value": "Ov23liphTXcKC33CrLIE"
            },
            {
              "name": "redirect_uri",
              "value": "https://privaseeai.net/auth/github/callback"
            },
            {
              "name": "scope",
              "value": "read:user,user:email"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 302,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "content-security-policy",
              "value": "default-src 'none'; base-uri 'self'; child-src github.githubassets.com github.com/assets-cdn/worker/ github.com/assets/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com *.rel.tunnels.api.visualstudio.com wss://*.rel.tunnels.api.visualstudio.com github.githubassets.com objects-origin.githubusercontent.com copilot-proxy.githubusercontent.com proxy.individual.githubcopilot.com proxy.business.githubcopilot.com proxy.enterprise.githubcopilot.com *.actions.githubusercontent.com wss://*.actions.githubusercontent.com productionresultssa0.blob.core.windows.net/ productionresultssa1.blob.core.windows.net/ productionresultssa2.blob.core.windows.net/ productionresultssa3.blob.core.windows.net/ productionresultssa4.blob.core.windows.net/ productionresultssa5.blob.core.windows.net/ productionresultssa6.blob.core.windows.net/ productionresultssa7.blob.core.windows.net/ productionresultssa8.blob.core.windows.net/ productionresultssa9.blob.core.windows.net/ productionresultssa10.blob.core.windows.net/ productionresultssa11.blob.core.windows.net/ productionresultssa12.blob.core.windows.net/ productionresultssa13.blob.core.windows.net/ productionresultssa14.blob.core.windows.net/ productionresultssa15.blob.core.windows.net/ productionresultssa16.blob.core.windows.net/ productionresultssa17.blob.core.windows.net/ productionresultssa18.blob.core.windows.net/ productionresultssa19.blob.core.windows.net/ github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com wss://alive-staging.github.com api.githubcopilot.com api.individual.githubcopilot.com api.business.githubcopilot.com api.enterprise.githubcopilot.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com copilot-workspace.githubnext.com objects-origin.githubusercontent.com; frame-ancestors 'self'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: blob: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com private-avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com release-assets.githubusercontent.com secured-user-images.githubusercontent.com/ user-images.githubusercontent.com/ private-user-images.githubusercontent.com opengraph.githubassets.com marketplace-screenshots.githubusercontent.com/ copilotprodattachments.blob.core.windows.net/github-production-copilot-attachments/ github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com objects-origin.githubusercontent.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/ private-user-images.githubusercontent.com github-production-user-asset-6210df.s3.amazonaws.com gist.github.com; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; upgrade-insecure-requests; worker-src github.githubassets.com github.com/assets-cdn/worker/ github.com/assets/ gist.github.com/assets-cdn/worker/"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Thu, 16 Oct 2025 22:13:29 GMT"
            },
            {
              "name": "location",
              "value": "https://privaseeai.net/auth/github/callback?code=61f62f2a158b44357412"
            },
            {
              "name": "referrer-policy",
              "value": "origin-when-cross-origin, strict-origin-when-cross-origin"
            },
            {
              "name": "server",
              "value": "github.com"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubdomains; preload"
            },
            {
              "name": "vary",
              "value": "X-Fetch-Nonce, X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, X-Requested-With,Accept-Encoding, Accept, X-Requested-With"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-frame-options",
              "value": "sameorigin"
            },
            {
              "name": "x-github-request-id",
              "value": "DE1A:1AB972:38FF81:4AB3AB:68F16DF7"
            },
            {
              "name": "x-xss-protection",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/html"
          },
          "redirectURL": "https://privaseeai.net/auth/github/callback?code=61f62f2a158b44357412",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 3565,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "140.82.113.4",
        "startedDateTime": "2025-10-16T22:13:29.571Z",
        "time": 387.7949999878183,
        "timings": {
          "blocked": 1.1619999962169678,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.13,
          "wait": 381.7770000069439,
          "receive": 4.725999984657392,
          "_blocked_queueing": 0.9129999962169677,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "330314",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "signIn",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 3030
              },
              {
                "functionName": "onClick",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 6012
              },
              {
                "functionName": "sA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9836
              },
              {
                "functionName": "oA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9993
              },
              {
                "functionName": "iA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 10050
              },
              {
                "functionName": "yS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31418
              },
              {
                "functionName": "xS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31838
              },
              {
                "functionName": "",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 37044
              },
              {
                "functionName": "qx",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 39,
                "columnNumber": 37418
              },
              {
                "functionName": "kv",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 8972
              },
              {
                "functionName": "qy",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 33131
              },
              {
                "functionName": "Ey",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17365
              },
              {
                "functionName": "SA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17149
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "443",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/auth/github/callback?code=61f62f2a158b44357412",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "privaseeai.net"
            },
            {
              "name": "Referer",
              "value": "https://privaseeai.net/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "cross-site"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            }
          ],
          "queryString": [
            {
              "name": "code",
              "value": "61f62f2a158b44357412"
            }
          ],
          "cookies": [],
          "headersSize": 923,
          "bodySize": 0
        },
        "response": {
          "status": 302,
          "statusText": "Found",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "48"
            },
            {
              "name": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 22:13:30 GMT"
            },
            {
              "name": "Location",
              "value": "/?error=auth_failed"
            },
            {
              "name": "Vary",
              "value": "Accept"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/html",
            "compression": 0
          },
          "redirectURL": "/?error=auth_failed",
          "headersSize": 236,
          "bodySize": 0,
          "_transferSize": 236,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "20.119.128.21",
        "startedDateTime": "2025-10-16T22:13:29.958Z",
        "time": 168.855000010808,
        "timings": {
          "blocked": 2.6820000033183025,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.09499999999999997,
          "wait": 163.4659999963492,
          "receive": 2.6120000111404806,
          "_blocked_queueing": 2.2880000033183023,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "signIn",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 3030
              },
              {
                "functionName": "onClick",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 22222,
                "columnNumber": 6012
              },
              {
                "functionName": "sA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9836
              },
              {
                "functionName": "oA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 9993
              },
              {
                "functionName": "iA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 10050
              },
              {
                "functionName": "yS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31418
              },
              {
                "functionName": "xS",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 31838
              },
              {
                "functionName": "",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 37044
              },
              {
                "functionName": "qx",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 39,
                "columnNumber": 37418
              },
              {
                "functionName": "kv",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 8972
              },
              {
                "functionName": "qy",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 33131
              },
              {
                "functionName": "Ey",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17365
              },
              {
                "functionName": "SA",
                "scriptId": "26",
                "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
                "lineNumber": 36,
                "columnNumber": 17149
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/?error=auth_failed",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Referer",
              "value": "https://privaseeai.net/"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            }
          ],
          "queryString": [
            {
              "name": "error",
              "value": "auth_failed"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Content-Length",
              "value": "1488"
            },
            {
              "name": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 22:13:06 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"5d0-199ef09d4d8\""
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 16 Oct 2025 22:00:23 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1488,
            "mimeType": "text/html",
            "text": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"AI-powered home security monitoring with TensorFlow.js\" />\n    \n    <!-- PWA Meta Tags -->\n    <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />\n    <link rel=\"manifest\" href=\"/manifest.json\" />\n    \n    <!-- Security and Privacy -->\n    <meta http-equiv=\"Content-Security-Policy\" content=\"\n      default-src 'self' https://github.com https://api.github.com;\n      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net;\n      style-src 'self' 'unsafe-inline';\n      img-src 'self' data: blob:;\n      media-src 'self' blob:;\n      connect-src 'self' https://*.blob.core.windows.net https://tfhub.dev https://storage.googleapis.com https://cdn.jsdelivr.net https://github.com https://api.github.com;\n      worker-src 'self' blob:;\n      form-action 'self' https://github.com;\n    \">\n    \n    <title>Home Security App</title>\n    <script type=\"module\" crossorigin src=\"/assets/index-6BPdfQg-.js\"></script>\n    <link rel=\"stylesheet\" crossorigin href=\"/assets/index-DanV3IS7.css\">\n  <link rel=\"manifest\" href=\"/manifest.webmanifest\"><script id=\"vite-plugin-pwa:register-sw\" src=\"/registerSW.js\"></script></head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": true,
          "_responseCacheStorageCacheName": "workbox-precache-v2-https://privaseeai.net/",
          "_serviceWorkerResponseSource": "cache-storage"
        },
        "serverIPAddress": "",
        "startedDateTime": "2025-10-16T22:13:30.127Z",
        "time": 5.608999999822117,
        "timings": {
          "blocked": 1.0319999997280538,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.457999999214895,
          "receive": 3.1190000008791685,
          "_blocked_queueing": 0.5579999997280538,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": 0.474,
          "_workerRespondWithSettled": 1.686
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://privaseeai.net/?error=auth_failed",
          "lineNumber": 26
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/assets/index-6BPdfQg-.js",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Origin",
              "value": "https://privaseeai.net"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Referer",
              "value": "https://privaseeai.net/?error=auth_failed"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "ETag",
              "value": "W/\"1fdc61-199eebe1250\""
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "2088033"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 20:47:42 GMT"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=UTF-8"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 16 Oct 2025 20:37:38 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2088033,
            "mimeType": "application/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": true,
          "_responseCacheStorageCacheName": "workbox-precache-v2-https://privaseeai.net/",
          "_serviceWorkerResponseSource": "cache-storage"
        },
        "serverIPAddress": "",
        "startedDateTime": "2025-10-16T22:13:30.138Z",
        "time": 1.896000001579523,
        "timings": {
          "blocked": 0.4719999921033159,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.8199999941755086,
          "receive": 0.6040000153006986,
          "_blocked_queueing": 0.4709999921033159,
          "_workerStart": 0,
          "_workerReady": 0.095,
          "_workerFetchStart": 0.095,
          "_workerRespondWithSettled": 0.747
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://privaseeai.net/?error=auth_failed",
          "lineNumber": 27
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/assets/index-DanV3IS7.css",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Origin",
              "value": "https://privaseeai.net"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Referer",
              "value": "https://privaseeai.net/?error=auth_failed"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "ETag",
              "value": "W/\"6917-199eebe1250\""
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "26903"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 20:47:43 GMT"
            },
            {
              "name": "Content-Type",
              "value": "text/css; charset=UTF-8"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 16 Oct 2025 20:37:38 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 26903,
            "mimeType": "text/css",
            "text": "*,:before,:after{--tw-border-spacing-x: 0;--tw-border-spacing-y: 0;--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x: 0;--tw-border-spacing-y: 0;--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }*,:before,:after{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}:before,:after{--tw-content: \"\"}html,:host{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",Segoe UI Symbol,\"Noto Color Emoji\";font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]:where(:not([hidden=until-found])){display:none}.container{width:100%}@media (min-width: 640px){.container{max-width:640px}}@media (min-width: 768px){.container{max-width:768px}}@media (min-width: 1024px){.container{max-width:1024px}}@media (min-width: 1280px){.container{max-width:1280px}}@media (min-width: 1536px){.container{max-width:1536px}}.pointer-events-none{pointer-events:none}.static{position:static}.fixed{position:fixed}.absolute{position:absolute}.relative{position:relative}.inset-0{inset:0}.-top-3{top:-.75rem}.-top-6{top:-1.5rem}.bottom-0{bottom:0}.left-0{left:0}.left-1\\/2{left:50%}.left-4{left:1rem}.right-0{right:0}.right-4{right:1rem}.top-0{top:0}.top-1\\/2{top:50%}.top-4{top:1rem}.z-20{z-index:20}.z-30{z-index:30}.z-50{z-index:50}.mx-auto{margin-left:auto;margin-right:auto}.mb-1{margin-bottom:.25rem}.mb-16{margin-bottom:4rem}.mb-2{margin-bottom:.5rem}.mb-3{margin-bottom:.75rem}.mb-4{margin-bottom:1rem}.mb-6{margin-bottom:1.5rem}.mb-8{margin-bottom:2rem}.ml-2{margin-left:.5rem}.ml-7{margin-left:1.75rem}.mr-1{margin-right:.25rem}.mr-2{margin-right:.5rem}.mr-3{margin-right:.75rem}.mr-4{margin-right:1rem}.mt-0\\.5{margin-top:.125rem}.mt-1{margin-top:.25rem}.mt-16{margin-top:4rem}.mt-2{margin-top:.5rem}.mt-20{margin-top:5rem}.mt-3{margin-top:.75rem}.mt-4{margin-top:1rem}.mt-6{margin-top:1.5rem}.mt-8{margin-top:2rem}.block{display:block}.inline{display:inline}.flex{display:flex}.inline-flex{display:inline-flex}.table{display:table}.grid{display:grid}.contents{display:contents}.hidden{display:none}.aspect-video{aspect-ratio:16 / 9}.h-1{height:.25rem}.h-10{height:2.5rem}.h-12{height:3rem}.h-2{height:.5rem}.h-3{height:.75rem}.h-4{height:1rem}.h-5{height:1.25rem}.h-6{height:1.5rem}.h-8{height:2rem}.h-full{height:100%}.max-h-40{max-height:10rem}.max-h-\\[70vh\\]{max-height:70vh}.max-h-full{max-height:100%}.min-h-screen{min-height:100vh}.w-1\\/2{width:50%}.w-12{width:3rem}.w-2{width:.5rem}.w-24{width:6rem}.w-3{width:.75rem}.w-3\\/4{width:75%}.w-4{width:1rem}.w-48{width:12rem}.w-5{width:1.25rem}.w-6{width:1.5rem}.w-8{width:2rem}.w-full{width:100%}.min-w-0{min-width:0px}.min-w-full{min-width:100%}.max-w-3xl{max-width:48rem}.max-w-4xl{max-width:56rem}.max-w-6xl{max-width:72rem}.max-w-7xl{max-width:80rem}.max-w-full{max-width:100%}.max-w-md{max-width:28rem}.max-w-xs{max-width:20rem}.flex-1{flex:1 1 0%}.flex-shrink-0{flex-shrink:0}.grow{flex-grow:1}.-translate-x-1\\/2{--tw-translate-x: -50%;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.-translate-y-1\\/2{--tw-translate-y: -50%;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}@keyframes pulse{50%{opacity:.5}}.animate-pulse{animation:pulse 2s cubic-bezier(.4,0,.6,1) infinite}@keyframes spin{to{transform:rotate(360deg)}}.animate-spin{animation:spin 1s linear infinite}.cursor-not-allowed{cursor:not-allowed}.cursor-pointer{cursor:pointer}.appearance-none{-webkit-appearance:none;-moz-appearance:none;appearance:none}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}.grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}.flex-col{flex-direction:column}.items-start{align-items:flex-start}.items-center{align-items:center}.justify-end{justify-content:flex-end}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-4{gap:1rem}.gap-6{gap:1.5rem}.gap-8{gap:2rem}.space-x-1>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.25rem * var(--tw-space-x-reverse));margin-left:calc(.25rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.5rem * var(--tw-space-x-reverse));margin-left:calc(.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-3>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.75rem * var(--tw-space-x-reverse));margin-left:calc(.75rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1rem * var(--tw-space-x-reverse));margin-left:calc(1rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-8>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(2rem * var(--tw-space-x-reverse));margin-left:calc(2rem * calc(1 - var(--tw-space-x-reverse)))}.space-y-1>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.25rem * var(--tw-space-y-reverse))}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.5rem * var(--tw-space-y-reverse))}.space-y-3>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.75rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.75rem * var(--tw-space-y-reverse))}.space-y-4>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1rem * var(--tw-space-y-reverse))}.space-y-6>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.5rem * var(--tw-space-y-reverse))}.space-y-8>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(2rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(2rem * var(--tw-space-y-reverse))}.divide-y>:not([hidden])~:not([hidden]){--tw-divide-y-reverse: 0;border-top-width:calc(1px * calc(1 - var(--tw-divide-y-reverse)));border-bottom-width:calc(1px * var(--tw-divide-y-reverse))}.divide-gray-200>:not([hidden])~:not([hidden]){--tw-divide-opacity: 1;border-color:rgb(229 231 235 / var(--tw-divide-opacity, 1))}.overflow-hidden{overflow:hidden}.overflow-y-auto{overflow-y:auto}.whitespace-nowrap{white-space:nowrap}.rounded{border-radius:.25rem}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded-md{border-radius:.375rem}.rounded-xl{border-radius:.75rem}.border{border-width:1px}.border-2{border-width:2px}.border-b{border-bottom-width:1px}.border-b-2{border-bottom-width:2px}.border-l-2{border-left-width:2px}.border-t{border-top-width:1px}.border-blue-300{--tw-border-opacity: 1;border-color:rgb(147 197 253 / var(--tw-border-opacity, 1))}.border-blue-400{--tw-border-opacity: 1;border-color:rgb(96 165 250 / var(--tw-border-opacity, 1))}.border-blue-500{--tw-border-opacity: 1;border-color:rgb(59 130 246 / var(--tw-border-opacity, 1))}.border-blue-600{--tw-border-opacity: 1;border-color:rgb(37 99 235 / var(--tw-border-opacity, 1))}.border-gray-300{--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity, 1))}.border-gray-500{--tw-border-opacity: 1;border-color:rgb(107 114 128 / var(--tw-border-opacity, 1))}.border-gray-600{--tw-border-opacity: 1;border-color:rgb(75 85 99 / var(--tw-border-opacity, 1))}.border-gray-700{--tw-border-opacity: 1;border-color:rgb(55 65 81 / var(--tw-border-opacity, 1))}.border-green-500{--tw-border-opacity: 1;border-color:rgb(34 197 94 / var(--tw-border-opacity, 1))}.border-orange-500{--tw-border-opacity: 1;border-color:rgb(249 115 22 / var(--tw-border-opacity, 1))}.border-red-500{--tw-border-opacity: 1;border-color:rgb(239 68 68 / var(--tw-border-opacity, 1))}.border-transparent{border-color:transparent}.border-yellow-400{--tw-border-opacity: 1;border-color:rgb(250 204 21 / var(--tw-border-opacity, 1))}.border-yellow-500{--tw-border-opacity: 1;border-color:rgb(234 179 8 / var(--tw-border-opacity, 1))}.bg-black{--tw-bg-opacity: 1;background-color:rgb(0 0 0 / var(--tw-bg-opacity, 1))}.bg-blue-50{--tw-bg-opacity: 1;background-color:rgb(239 246 255 / var(--tw-bg-opacity, 1))}.bg-blue-500{--tw-bg-opacity: 1;background-color:rgb(59 130 246 / var(--tw-bg-opacity, 1))}.bg-blue-600{--tw-bg-opacity: 1;background-color:rgb(37 99 235 / var(--tw-bg-opacity, 1))}.bg-gray-200{--tw-bg-opacity: 1;background-color:rgb(229 231 235 / var(--tw-bg-opacity, 1))}.bg-gray-400{--tw-bg-opacity: 1;background-color:rgb(156 163 175 / var(--tw-bg-opacity, 1))}.bg-gray-50{--tw-bg-opacity: 1;background-color:rgb(249 250 251 / var(--tw-bg-opacity, 1))}.bg-gray-500{--tw-bg-opacity: 1;background-color:rgb(107 114 128 / var(--tw-bg-opacity, 1))}.bg-gray-600{--tw-bg-opacity: 1;background-color:rgb(75 85 99 / var(--tw-bg-opacity, 1))}.bg-gray-700{--tw-bg-opacity: 1;background-color:rgb(55 65 81 / var(--tw-bg-opacity, 1))}.bg-gray-800{--tw-bg-opacity: 1;background-color:rgb(31 41 55 / var(--tw-bg-opacity, 1))}.bg-gray-900{--tw-bg-opacity: 1;background-color:rgb(17 24 39 / var(--tw-bg-opacity, 1))}.bg-green-100{--tw-bg-opacity: 1;background-color:rgb(220 252 231 / var(--tw-bg-opacity, 1))}.bg-green-50{--tw-bg-opacity: 1;background-color:rgb(240 253 244 / var(--tw-bg-opacity, 1))}.bg-green-500{--tw-bg-opacity: 1;background-color:rgb(34 197 94 / var(--tw-bg-opacity, 1))}.bg-green-600{--tw-bg-opacity: 1;background-color:rgb(22 163 74 / var(--tw-bg-opacity, 1))}.bg-orange-500{--tw-bg-opacity: 1;background-color:rgb(249 115 22 / var(--tw-bg-opacity, 1))}.bg-purple-500{--tw-bg-opacity: 1;background-color:rgb(168 85 247 / var(--tw-bg-opacity, 1))}.bg-purple-600{--tw-bg-opacity: 1;background-color:rgb(147 51 234 / var(--tw-bg-opacity, 1))}.bg-red-100{--tw-bg-opacity: 1;background-color:rgb(254 226 226 / var(--tw-bg-opacity, 1))}.bg-red-50{--tw-bg-opacity: 1;background-color:rgb(254 242 242 / var(--tw-bg-opacity, 1))}.bg-red-500{--tw-bg-opacity: 1;background-color:rgb(239 68 68 / var(--tw-bg-opacity, 1))}.bg-white{--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1))}.bg-yellow-50{--tw-bg-opacity: 1;background-color:rgb(254 252 232 / var(--tw-bg-opacity, 1))}.bg-yellow-500{--tw-bg-opacity: 1;background-color:rgb(234 179 8 / var(--tw-bg-opacity, 1))}.bg-opacity-10{--tw-bg-opacity: .1}.bg-opacity-50{--tw-bg-opacity: .5}.bg-opacity-70{--tw-bg-opacity: .7}.bg-opacity-75{--tw-bg-opacity: .75}.bg-opacity-80{--tw-bg-opacity: .8}.bg-opacity-90{--tw-bg-opacity: .9}.bg-gradient-to-r{background-image:linear-gradient(to right,var(--tw-gradient-stops))}.from-purple-500{--tw-gradient-from: #a855f7 var(--tw-gradient-from-position);--tw-gradient-to: rgb(168 85 247 / 0) var(--tw-gradient-to-position);--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to)}.to-pink-500{--tw-gradient-to: #ec4899 var(--tw-gradient-to-position)}.object-contain{-o-object-fit:contain;object-fit:contain}.object-cover{-o-object-fit:cover;object-fit:cover}.p-1{padding:.25rem}.p-2{padding:.5rem}.p-3{padding:.75rem}.p-4{padding:1rem}.p-6{padding:1.5rem}.p-8{padding:2rem}.px-1{padding-left:.25rem;padding-right:.25rem}.px-2{padding-left:.5rem;padding-right:.5rem}.px-2\\.5{padding-left:.625rem;padding-right:.625rem}.px-3{padding-left:.75rem;padding-right:.75rem}.px-4{padding-left:1rem;padding-right:1rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.py-0\\.5{padding-top:.125rem;padding-bottom:.125rem}.py-1{padding-top:.25rem;padding-bottom:.25rem}.py-16{padding-top:4rem;padding-bottom:4rem}.py-2{padding-top:.5rem;padding-bottom:.5rem}.py-3{padding-top:.75rem;padding-bottom:.75rem}.py-4{padding-top:1rem;padding-bottom:1rem}.py-6{padding-top:1.5rem;padding-bottom:1.5rem}.py-8{padding-top:2rem;padding-bottom:2rem}.pl-2{padding-left:.5rem}.pl-4{padding-left:1rem}.pt-3{padding-top:.75rem}.pt-6{padding-top:1.5rem}.text-left{text-align:left}.text-center{text-align:center}.text-2xl{font-size:1.5rem;line-height:2rem}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-4xl{font-size:2.25rem;line-height:2.5rem}.text-lg{font-size:1.125rem;line-height:1.75rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-xs{font-size:.75rem;line-height:1rem}.font-bold{font-weight:700}.font-extrabold{font-weight:800}.font-medium{font-weight:500}.font-semibold{font-weight:600}.uppercase{text-transform:uppercase}.capitalize{text-transform:capitalize}.tracking-wide{letter-spacing:.025em}.tracking-wider{letter-spacing:.05em}.text-black{--tw-text-opacity: 1;color:rgb(0 0 0 / var(--tw-text-opacity, 1))}.text-blue-400{--tw-text-opacity: 1;color:rgb(96 165 250 / var(--tw-text-opacity, 1))}.text-blue-500{--tw-text-opacity: 1;color:rgb(59 130 246 / var(--tw-text-opacity, 1))}.text-blue-600{--tw-text-opacity: 1;color:rgb(37 99 235 / var(--tw-text-opacity, 1))}.text-blue-700{--tw-text-opacity: 1;color:rgb(29 78 216 / var(--tw-text-opacity, 1))}.text-gray-300{--tw-text-opacity: 1;color:rgb(209 213 219 / var(--tw-text-opacity, 1))}.text-gray-400{--tw-text-opacity: 1;color:rgb(156 163 175 / var(--tw-text-opacity, 1))}.text-gray-500{--tw-text-opacity: 1;color:rgb(107 114 128 / var(--tw-text-opacity, 1))}.text-gray-600{--tw-text-opacity: 1;color:rgb(75 85 99 / var(--tw-text-opacity, 1))}.text-gray-700{--tw-text-opacity: 1;color:rgb(55 65 81 / var(--tw-text-opacity, 1))}.text-gray-900{--tw-text-opacity: 1;color:rgb(17 24 39 / var(--tw-text-opacity, 1))}.text-green-300{--tw-text-opacity: 1;color:rgb(134 239 172 / var(--tw-text-opacity, 1))}.text-green-400{--tw-text-opacity: 1;color:rgb(74 222 128 / var(--tw-text-opacity, 1))}.text-green-600{--tw-text-opacity: 1;color:rgb(22 163 74 / var(--tw-text-opacity, 1))}.text-green-800{--tw-text-opacity: 1;color:rgb(22 101 52 / var(--tw-text-opacity, 1))}.text-indigo-600{--tw-text-opacity: 1;color:rgb(79 70 229 / var(--tw-text-opacity, 1))}.text-orange-400{--tw-text-opacity: 1;color:rgb(251 146 60 / var(--tw-text-opacity, 1))}.text-purple-400{--tw-text-opacity: 1;color:rgb(192 132 252 / var(--tw-text-opacity, 1))}.text-purple-500{--tw-text-opacity: 1;color:rgb(168 85 247 / var(--tw-text-opacity, 1))}.text-purple-600{--tw-text-opacity: 1;color:rgb(147 51 234 / var(--tw-text-opacity, 1))}.text-red-400{--tw-text-opacity: 1;color:rgb(248 113 113 / var(--tw-text-opacity, 1))}.text-red-500{--tw-text-opacity: 1;color:rgb(239 68 68 / var(--tw-text-opacity, 1))}.text-red-600{--tw-text-opacity: 1;color:rgb(220 38 38 / var(--tw-text-opacity, 1))}.text-red-800{--tw-text-opacity: 1;color:rgb(153 27 27 / var(--tw-text-opacity, 1))}.text-white{--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}.text-yellow-400{--tw-text-opacity: 1;color:rgb(250 204 21 / var(--tw-text-opacity, 1))}.text-yellow-500{--tw-text-opacity: 1;color:rgb(234 179 8 / var(--tw-text-opacity, 1))}.text-yellow-600{--tw-text-opacity: 1;color:rgb(202 138 4 / var(--tw-text-opacity, 1))}.opacity-50{opacity:.5}.opacity-60{opacity:.6}.opacity-75{opacity:.75}.shadow{--tw-shadow: 0 1px 3px 0 rgb(0 0 0 / .1), 0 1px 2px -1px rgb(0 0 0 / .1);--tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.shadow-lg{--tw-shadow: 0 10px 15px -3px rgb(0 0 0 / .1), 0 4px 6px -4px rgb(0 0 0 / .1);--tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.shadow-sm{--tw-shadow: 0 1px 2px 0 rgb(0 0 0 / .05);--tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.ring-2{--tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow, 0 0 #0000)}.ring-purple-500{--tw-ring-opacity: 1;--tw-ring-color: rgb(168 85 247 / var(--tw-ring-opacity, 1))}.ring-opacity-50{--tw-ring-opacity: .5}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.backdrop-blur-sm{--tw-backdrop-blur: blur(4px);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-colors{transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.duration-200{transition-duration:.2s}.duration-300{transition-duration:.3s}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;background-color:#111827;color:#fff}@keyframes pulse-detection{0%,to{opacity:1;transform:scale(1)}50%{opacity:.8;transform:scale(1.02)}}.detection-box{animation:pulse-detection 2s infinite;border:2px solid #ef4444;background-color:#ef44441a}.detection-box.person{border-color:#ef4444;background-color:#ef44441a}.detection-box.vehicle{border-color:#3b82f6;background-color:#3b82f61a}.detection-box.animal{border-color:#10b981;background-color:#10b9811a}.camera-container{position:relative;overflow:hidden;border-radius:.5rem}.camera-stream{width:100%;height:100%;-o-object-fit:cover;object-fit:cover}.status-indicator{display:flex;align-items:center;gap:.5rem;padding:.25rem .75rem;border-radius:9999px;font-size:.875rem;font-weight:500}.status-indicator.active{background-color:#10b981;color:#fff}.status-indicator.inactive{background-color:#6b7280;color:#fff}.severity-critical{background-color:#dc2626;color:#fff}.severity-high{background-color:#ea580c;color:#fff}.severity-medium{background-color:#ca8a04;color:#000}.severity-low{background-color:#16a34a;color:#fff}.loading-spinner{border:3px solid #374151;border-top:3px solid #3b82f6;border-radius:50%;animation:spin 1s linear infinite}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@media (max-width: 768px){.camera-container{aspect-ratio:16/9}.detection-overlay{font-size:.75rem}}.bg-dark{background-color:#0f172a}.bg-dark-secondary{background-color:#1e293b}.text-dark-primary{color:#f1f5f9}.text-dark-secondary{color:#94a3b8}.hover\\:border-gray-300:hover{--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity, 1))}.hover\\:bg-blue-100:hover{--tw-bg-opacity: 1;background-color:rgb(219 234 254 / var(--tw-bg-opacity, 1))}.hover\\:bg-blue-600:hover{--tw-bg-opacity: 1;background-color:rgb(37 99 235 / var(--tw-bg-opacity, 1))}.hover\\:bg-blue-700:hover{--tw-bg-opacity: 1;background-color:rgb(29 78 216 / var(--tw-bg-opacity, 1))}.hover\\:bg-gray-100:hover{--tw-bg-opacity: 1;background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1))}.hover\\:bg-gray-50:hover{--tw-bg-opacity: 1;background-color:rgb(249 250 251 / var(--tw-bg-opacity, 1))}.hover\\:bg-gray-600:hover{--tw-bg-opacity: 1;background-color:rgb(75 85 99 / var(--tw-bg-opacity, 1))}.hover\\:bg-gray-700:hover{--tw-bg-opacity: 1;background-color:rgb(55 65 81 / var(--tw-bg-opacity, 1))}.hover\\:bg-green-600:hover{--tw-bg-opacity: 1;background-color:rgb(22 163 74 / var(--tw-bg-opacity, 1))}.hover\\:bg-green-700:hover{--tw-bg-opacity: 1;background-color:rgb(21 128 61 / var(--tw-bg-opacity, 1))}.hover\\:bg-purple-700:hover{--tw-bg-opacity: 1;background-color:rgb(126 34 206 / var(--tw-bg-opacity, 1))}.hover\\:bg-red-600:hover{--tw-bg-opacity: 1;background-color:rgb(220 38 38 / var(--tw-bg-opacity, 1))}.hover\\:from-purple-600:hover{--tw-gradient-from: #9333ea var(--tw-gradient-from-position);--tw-gradient-to: rgb(147 51 234 / 0) var(--tw-gradient-to-position);--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to)}.hover\\:to-pink-600:hover{--tw-gradient-to: #db2777 var(--tw-gradient-to-position)}.hover\\:text-gray-700:hover{--tw-text-opacity: 1;color:rgb(55 65 81 / var(--tw-text-opacity, 1))}.hover\\:text-gray-900:hover{--tw-text-opacity: 1;color:rgb(17 24 39 / var(--tw-text-opacity, 1))}.hover\\:text-indigo-900:hover{--tw-text-opacity: 1;color:rgb(49 46 129 / var(--tw-text-opacity, 1))}.hover\\:text-red-400:hover{--tw-text-opacity: 1;color:rgb(248 113 113 / var(--tw-text-opacity, 1))}.hover\\:text-white:hover{--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}.focus\\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus\\:ring-2:focus{--tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow, 0 0 #0000)}.focus\\:ring-blue-500:focus{--tw-ring-opacity: 1;--tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1))}.focus\\:ring-purple-500:focus{--tw-ring-opacity: 1;--tw-ring-color: rgb(168 85 247 / var(--tw-ring-opacity, 1))}.focus\\:ring-red-500:focus{--tw-ring-opacity: 1;--tw-ring-color: rgb(239 68 68 / var(--tw-ring-opacity, 1))}.focus\\:ring-yellow-500:focus{--tw-ring-opacity: 1;--tw-ring-color: rgb(234 179 8 / var(--tw-ring-opacity, 1))}.focus\\:ring-offset-2:focus{--tw-ring-offset-width: 2px}.disabled\\:cursor-not-allowed:disabled{cursor:not-allowed}.disabled\\:opacity-50:disabled{opacity:.5}@media (min-width: 640px){.sm\\:px-6{padding-left:1.5rem;padding-right:1.5rem}}@media (min-width: 768px){.md\\:block{display:block}.md\\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}.md\\:grid-cols-3{grid-template-columns:repeat(3,minmax(0,1fr))}.md\\:text-5xl{font-size:3rem;line-height:1}}@media (min-width: 1024px){.lg\\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}.lg\\:grid-cols-3{grid-template-columns:repeat(3,minmax(0,1fr))}.lg\\:px-8{padding-left:2rem;padding-right:2rem}}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": true,
          "_responseCacheStorageCacheName": "workbox-precache-v2-https://privaseeai.net/",
          "_serviceWorkerResponseSource": "cache-storage"
        },
        "serverIPAddress": "",
        "startedDateTime": "2025-10-16T22:13:30.138Z",
        "time": 1.759999999194406,
        "timings": {
          "blocked": 0.3869999997075647,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.1219999945499004,
          "receive": 0.25100000493694097,
          "_blocked_queueing": 0.3859999997075647,
          "_workerStart": 0.001,
          "_workerReady": 0.357,
          "_workerFetchStart": 0.357,
          "_workerRespondWithSettled": 1.063
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://privaseeai.net/?error=auth_failed",
          "lineNumber": 28
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/registerSW.js",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Referer",
              "value": "https://privaseeai.net/?error=auth_failed"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "ETag",
              "value": "W/\"86-199ee944330\""
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "134"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 20:13:04 GMT"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=UTF-8"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 16 Oct 2025 19:51:58 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 134,
            "mimeType": "application/javascript",
            "text": "if('serviceWorker' in navigator) {window.addEventListener('load', () => {navigator.serviceWorker.register('/sw.js', { scope: '/' })})}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": true,
          "_responseCacheStorageCacheName": "workbox-precache-v2-https://privaseeai.net/",
          "_serviceWorkerResponseSource": "cache-storage"
        },
        "serverIPAddress": "",
        "startedDateTime": "2025-10-16T22:13:30.138Z",
        "time": 2.099999997881241,
        "timings": {
          "blocked": 0.377000003259629,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.4450000023720786,
          "receive": 0.27799999224953353,
          "_blocked_queueing": 0.375000003259629,
          "_workerStart": 0.002,
          "_workerReady": 0.487,
          "_workerFetchStart": 0.487,
          "_workerRespondWithSettled": 1.4
        }
      },
      {
        "_connectionId": "330275",
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "connection": "443",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://privaseeai.net/vite.svg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "privaseeai.net"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 16 Oct 2025 22:00:23 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"5d0-199ef09d4d8\""
            },
            {
              "name": "Referer",
              "value": "https://privaseeai.net/?error=auth_failed"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 865,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "name": "Date",
              "value": "Thu, 16 Oct 2025 22:13:30 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"5d0-199ef09d4d8\""
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 16 Oct 2025 22:00:23 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1488,
            "mimeType": "text/html",
            "text": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"AI-powered home security monitoring with TensorFlow.js\" />\n    \n    <!-- PWA Meta Tags -->\n    <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />\n    <link rel=\"manifest\" href=\"/manifest.json\" />\n    \n    <!-- Security and Privacy -->\n    <meta http-equiv=\"Content-Security-Policy\" content=\"\n      default-src 'self' https://github.com https://api.github.com;\n      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net;\n      style-src 'self' 'unsafe-inline';\n      img-src 'self' data: blob:;\n      media-src 'self' blob:;\n      connect-src 'self' https://*.blob.core.windows.net https://tfhub.dev https://storage.googleapis.com https://cdn.jsdelivr.net https://github.com https://api.github.com;\n      worker-src 'self' blob:;\n      form-action 'self' https://github.com;\n    \">\n    \n    <title>Home Security App</title>\n    <script type=\"module\" crossorigin src=\"/assets/index-6BPdfQg-.js\"></script>\n    <link rel=\"stylesheet\" crossorigin href=\"/assets/index-DanV3IS7.css\">\n  <link rel=\"manifest\" href=\"/manifest.webmanifest\"><script id=\"vite-plugin-pwa:register-sw\" src=\"/registerSW.js\"></script></head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>"
          },
          "redirectURL": "",
          "headersSize": 267,
          "bodySize": 0,
          "_transferSize": 267,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "20.119.128.21",
        "startedDateTime": "2025-10-16T22:13:30.205Z",
        "time": 112.02400000183843,
        "timings": {
          "blocked": 0.6420000091968104,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.05400000000000002,
          "wait": 111.14899999752734,
          "receive": 0.17899999511428177,
          "_blocked_queueing": 0.5000000091968104,
          "_workerStart": -0.365,
          "_workerReady": -0.298,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      }
    ]
  }
}